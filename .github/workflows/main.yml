name: Ollama Code Review

# 상단에 환경 변수 설정
env:
  OLLAMA_IP: "10.11.10.83"
  OLLAMA_MODEL: "llama2:3b"
  FILE_EXTENSIONS: ".java"  # 리뷰할 파일 확장자
  REQUEST_TIMEOUT: 600  # 타임아웃 시간(초)

on:
  pull_request:
    types: [opened, synchronize]
    branches: [ main ]

jobs:
  code-review:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Get changed files
      id: changed-files
      run: |
        git diff --name-only origin/${{ github.base_ref }} HEAD > changed_files.txt
        echo "Changed files:"
        cat changed_files.txt

    - name: Install Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Request code review
      id: review
      env:
        PR_NUMBER: ${{ github.event.pull_request.number }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python << 'EOF'
        import requests
        import os
        import json
        from pathlib import Path

        # 환경 변수에서 설정 가져오기
        OLLAMA_IP = os.environ['OLLAMA_IP']
        OLLAMA_MODEL = os.environ['OLLAMA_MODEL']
        FILE_EXTENSIONS = os.environ['FILE_EXTENSIONS'].split(',')
        REQUEST_TIMEOUT = int(os.environ['REQUEST_TIMEOUT'])
        OLLAMA_URL = f"http://{OLLAMA_IP}:11434/api/generate"
        
        print(f"Starting code review with timeout: {REQUEST_TIMEOUT} seconds")
        
        # 변경된 파일 읽기
        changed_files = Path('changed_files.txt').read_text().splitlines()
        
        review_comments = []
        
        # Java 파일만 필터링
        java_files = [f for f in changed_files if any(f.endswith(ext) for ext in FILE_EXTENSIONS)]
        
        if not java_files:
            comment = "No Java files were changed in this PR."
            review_comments.append(comment)
        else:
            for file_path in java_files:
                if not Path(file_path).exists():
                    continue
                    
                print(f"Reviewing file: {file_path}")
                # 파일 내용 읽기
                file_content = Path(file_path).read_text()
                
                # Ollama에 리뷰 요청
                prompt = f"""
                Please review this Java code and provide feedback:
                File: {file_path}
                
                ```java
                {file_content}
                ```
                
                Please analyze the following aspects:
                1. Code quality and Java best practices
                2. Potential bugs or logical errors
                3. Performance considerations
                4. Clean code principles
                5. Design patterns usage
                6. Security concerns
                
                Format your response as:
                ## Summary
                [Brief overview of the code]
                
                ## Key Findings
                [Main points and issues]
                
                ## Recommendations
                [Specific suggestions for improvement]
                """
                
                try:
                    print(f"Sending request to Ollama for {file_path}")
                    response = requests.post(OLLAMA_URL, 
                        json={
                            "model": OLLAMA_MODEL,
                            "prompt": prompt,
                            "stream": False
                        }, timeout=REQUEST_TIMEOUT)
                    
                    if response.status_code == 200:
                        review_result = response.json()
                        review_comments.append(f"## Code Review for `{file_path}`\n\n{review_result['response']}\n\n---\n")
                        print(f"Successfully reviewed {file_path}")
                    else:
                        error_message = f"⚠️ Failed to review `{file_path}`. Status code: {response.status_code}"
                        review_comments.append(f"{error_message}\n\n---\n")
                        print(error_message)
                except requests.Timeout:
                    timeout_message = f"⚠️ Review timed out for `{file_path}` after {REQUEST_TIMEOUT} seconds"
                    review_comments.append(f"{timeout_message}\n\n---\n")
                    print(timeout_message)
                except Exception as e:
                    error_message = f"⚠️ Error reviewing `{file_path}`: {str(e)}"
                    review_comments.append(f"{error_message}\n\n---\n")
                    print(error_message)
        
        # GitHub PR에 코멘트 추가
        comment = f"""
        # Ollama Code Review Results
        
        Using model: `{OLLAMA_MODEL}`
        Timeout setting: `{REQUEST_TIMEOUT} seconds`
        
        {"\n".join(review_comments)}
        
        ---
        This review was automatically generated by Ollama Code Review action.
        """
        
        print("Posting review comments to PR")
        github_api_url = f"https://api.github.com/repos/{os.environ['GITHUB_REPOSITORY']}/issues/{os.environ['PR_NUMBER']}/comments"
        
        headers = {
            "Authorization": f"token {os.environ['GITHUB_TOKEN']}",
            "Accept": "application/vnd.github.v3+json"
        }
        
        response = requests.post(github_api_url, 
            headers=headers,
            json={"body": comment}
        )
        
        if response.status_code != 201:
            error_message = f"Error posting comment: {response.text}"
            print(error_message)
            exit(1)
        else:
            print("Successfully posted review comments to PR")
        EOF
