name: GroqCloud Code Review

env:
  # 서버 설정
  GROQ_API_URL: "https://api.groq.com/openai/v1/chat/completions"
  GROQ_MODEL: "llama3-70b-8192"
  REQUEST_TIMEOUT: 600  # 타임아웃 시간(초)
  
  # 파일 설정
  FILE_EXTENSIONS: ".java"  # 리뷰할 파일 확장자
  
  # 리뷰 프롬프트 설정
  REVIEW_ASPECTS: |
    1. Code quality and Java best practices
    2. Potential bugs or logical errors
    3. Performance considerations
    4. Clean code principles
    5. Design patterns usage
    6. Security concerns

  REVIEW_FORMAT: |
    ## Summary
    [Brief overview of the code]
    
    ## Key Findings
    [Main points and issues]
    
    ## Recommendations
    [Specific suggestions for improvement]

on:
  pull_request:
    types: [opened, synchronize]
    branches: [ main ]

jobs:
  code-review:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Get changed files
      id: changed-files
      run: |
        git diff --name-only origin/${{ github.base_ref }} HEAD > changed_files.txt
        echo "Changed files:"
        cat changed_files.txt

    - name: Install Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Request code review
      id: review
      env:
        PR_NUMBER: ${{ github.event.pull_request.number }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
      run: |
        python << 'EOF'
        import requests
        import os
        import json
        from pathlib import Path

        # 환경 변수에서 설정 가져오기
        GROQ_API_URL = os.environ['GROQ_API_URL']
        GROQ_MODEL = os.environ['GROQ_MODEL']
        GROQ_API_KEY = os.environ['GROQ_API_KEY']
        FILE_EXTENSIONS = os.environ['FILE_EXTENSIONS'].split(',')
        REQUEST_TIMEOUT = int(os.environ['REQUEST_TIMEOUT'])
        REVIEW_ASPECTS = os.environ['REVIEW_ASPECTS']
        REVIEW_FORMAT = os.environ['REVIEW_FORMAT']
        
        print(f"Starting code review with timeout: {REQUEST_TIMEOUT} seconds")
        
        # 변경된 파일 읽기
        changed_files = Path('changed_files.txt').read_text().splitlines()
        
        review_comments = []
        
        # Java 파일만 필터링
        java_files = [f for f in changed_files if any(f.endswith(ext) for ext in FILE_EXTENSIONS)]
        
        if not java_files:
            comment = "No Java files were changed in this PR."
            review_comments.append(comment)
        else:
            for file_path in java_files:
                if not Path(file_path).exists():
                    continue
                    
                print(f"Reviewing file: {file_path}")
                # 파일 내용 읽기
                file_content = Path(file_path).read_text()
                
                try:
                    print(f"Sending request to GroqCloud for {file_path}")
                    headers = {
                        'Authorization': f'Bearer {GROQ_API_KEY}',
                        'Content-Type': 'application/json'
                    }
                    
                    # 1단계: 영어로 코드 리뷰 요청
                    english_prompt = f"""
                    Please review this Java code and provide detailed feedback:
                    File: {file_path}
                    
                    ```java
                    {file_content}
                    ```
                    
                    Please analyze the following aspects:
                    {REVIEW_ASPECTS}
                    
                    Format your response as:
                    {REVIEW_FORMAT}
                    """
                    
                    response = requests.post(GROQ_API_URL, 
                        headers=headers,
                        json={
                            "model": GROQ_MODEL,
                            "messages": [
                                {
                                    "role": "user",
                                    "content": english_prompt
                                }
                            ]
                        }, 
                        timeout=REQUEST_TIMEOUT)
                    
                    if response.status_code == 200:
                        english_review = response.json()['choices'][0]['message']['content']
                        print(f"Successfully got English review for {file_path}")
                        
                        # 2단계: 영어 리뷰 결과를 한글로 번역 요청
                        translation_prompt = f"""
                        다음 코드 리뷰를 한글로 번역해주세요. 
                        단, 다음 사항을 주의해서 번역해주세요:
                        1. 클래스명, 메서드명, 변수명은 그대로 유지
                        2. 디자인 패턴명, 프레임워크명 등 기술 용어는 영문 유지
                        3. 나머지 내용은 자연스러운 한국어로 번역
                        4. 원문의 구조(##으로 시작하는 섹션 등)는 유지
                        
                        원문:
                        {english_review}
                        """
                        
                        print(f"Requesting translation for {file_path}")
                        translation_response = requests.post(GROQ_API_URL,
                            headers=headers,
                            json={
                                "model": GROQ_MODEL,
                                "messages": [
                                    {
                                        "role": "user",
                                        "content": translation_prompt
                                    }
                                ]
                            },
                            timeout=REQUEST_TIMEOUT)
                        
                        if translation_response.status_code == 200:
                            korean_review = translation_response.json()['choices'][0]['message']['content']
                            review_comments.append(f"## Code Review for `{file_path}`\n\n{korean_review}\n\n---\n")
                            print(f"Successfully reviewed and translated for {file_path}")
                        else:
                            error_message = f"⚠️ Failed to translate review for `{file_path}`. Status code: {translation_response.status_code}"
                            review_comments.append(f"{error_message}\n\n---\n")
                            print(error_message)
                    else:
                        error_message = f"⚠️ Failed to review `{file_path}`. Status code: {response.status_code}"
                        review_comments.append(f"{error_message}\n\n---\n")
                        print(error_message)
                except requests.Timeout:
                    timeout_message = f"⚠️ Review timed out for `{file_path}` after {REQUEST_TIMEOUT} seconds"
                    review_comments.append(f"{timeout_message}\n\n---\n")
                    print(timeout_message)
                except Exception as e:
                    error_message = f"⚠️ Error reviewing `{file_path}`: {str(e)}"
                    review_comments.append(f"{error_message}\n\n---\n")
                    print(error_message)
        
        # GitHub PR에 코멘트 추가
        comment = f"""
        # GroqCloud 코드 리뷰 결과
        
        사용 모델: `{GROQ_MODEL}`
        타임아웃 설정: `{REQUEST_TIMEOUT}초`
        
        {"\n".join(review_comments)}
        
        ---
        이 리뷰는 GroqCloud Code Review 액션에 의해 자동으로 생성되었습니다.
        """
        
        print("Posting review comments to PR")
        github_api_url = f"https://api.github.com/repos/{os.environ['GITHUB_REPOSITORY']}/issues/{os.environ['PR_NUMBER']}/comments"
        
        headers = {
            "Authorization": f"token {os.environ['GITHUB_TOKEN']}",
            "Accept": "application/vnd.github.v3+json"
        }
        
        response = requests.post(github_api_url, 
            headers=headers,
            json={"body": comment}
        )
        
        if response.status_code != 201:
            error_message = f"Error posting comment: {response.text}"
            print(error_message)
            exit(1)
        else:
            print("Successfully posted review comments to PR")
        EOF
